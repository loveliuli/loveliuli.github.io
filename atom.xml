<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[鹰击长空]]></title>
  <subtitle><![CDATA[Where there is a will, there is way。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://loveliuli.com/"/>
  <updated>2015-04-19T03:31:09.782Z</updated>
  <id>http://loveliuli.com/</id>
  
  <author>
    <name><![CDATA[Copyright By Qun.Xue  版权所有]]></name>
    <email><![CDATA[505711559@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[揭秘让您和家人远离灾祸的真正原理，绝对受益终生！-陈大惠]]></title>
    <link href="http://loveliuli.com/2015/04/13/life/life_03_traditional%20culture_01/"/>
    <id>http://loveliuli.com/2015/04/13/life/life_03_traditional culture_01/</id>
    <published>2015-04-13T14:18:19.000Z</published>
    <updated>2015-04-19T03:31:00.000Z</updated>
    <content type="html"><![CDATA[<h4 id="-more-">为什么今天的孩子那么爱生病，今天的年轻人那么容易英年早逝？平时儿童医院孩子们看病排队排到外面来。有很多年轻的人一出名就死了，有些官员一提升重病，有的人家里有钱刚盖完房子，人去世了，出车祸了。为什么？就是这四个字“德不配位”。<a id="more"></a></h4>
<h1 id="-">厚德载物</h1>
<pre><code>我们所有的财富、智慧，我们的一切，老祖宗用一个字来代表叫物。厚德才能承载万物。这就是清华大学的校训——“厚德载物”.厚，深厚的意思；德按照自然规律去工作、去生活、去做人做事；载就是承载；物就是我们说的福报。
</code></pre><p>相反是那句话？叫德不配位。位就是我们的待遇，就是我们的德行不配我们的福报。打个比方说，这有一张桌子，它能承受十斤重的份量，您非得给它放上15斤、20斤、50斤的重量，那我们看这个桌子怎么样？它就开始发抖，它就开始变形了，出现崩溃之前的先兆。
所以我们一定要明白清华大学的古训“厚德载物”，金钱、权力、名望都是自己的福报，都是压自己的物啊，您能承载的了吗？靠什么承载，靠符合万物规律的德行。</p>
]]></content>
    <summary type="html"><![CDATA[<h4 id="-more-">为什么今天的孩子那么爱生病，今天的年轻人那么容易英年早逝？平时儿童医院孩子们看病排队排到外面来。有很多年轻的人一出名就死了，有些官员一提升重病，有的人家里有钱刚盖完房子，人去世了，出车祸了。为什么？就是这四个字“德不配位”。]]></summary>
    
      <category term="life" scheme="http://loveliuli.com/tags/life/"/>
    
      <category term="生活" scheme="http://loveliuli.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从心开始]]></title>
    <link href="http://loveliuli.com/2015/04/13/life/life_02_changeme/"/>
    <id>http://loveliuli.com/2015/04/13/life/life_02_changeme/</id>
    <published>2015-04-13T14:18:19.000Z</published>
    <updated>2015-04-13T14:23:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="-">从今天起，我要做一个快乐的人，忘记过去不开心的一切。</h3>
<h3 id="-more-">从今天起，我用一生的时间去追求至真至善至美，细心发现身边的真、善、美！<a id="more"></a></h3>
<h3 id="-"><strong>忘记过去</strong></h3>
<pre><code>从今天起，我要做一个快乐的人，忘记过去不开心的一切，忘记他人眼光
我要在我的记忆里，只留下真、善、美的印记
因为在人即将离开人世的那一刹那，其他的一切都是小我，包括钱财、美色、权利、躯体等，都会消失
唯有真、善、美，一直伴随在真我身边，不会随着生命消失而消失
所以就有了人之将死其言也善，鸟之将死其鸣也哀谚语
</code></pre><h3 id="-"><strong>活在当下</strong></h3>
<pre><code>只有此刻，才最真实，保持每时每刻的开心，才是人生最重要的事情
快乐不能储藏，所以需要珍惜当下
人生没有退路，只有向前，才能获得更多快乐
积极人生、快乐生活，活在当下
</code></pre><h3 id="-"><strong>感恩生命</strong></h3>
<pre><code> 感恩生命中的每一个人，正是有了他们，才会让你的生活多彩
 感恩身边的每一个人，正是有了他们，你才不会感到孤独
 感恩帮助过你的每一个人，正是有了他们，才让你感受到了友情
 感恩打击过你的每一个人，正是有了他们，你才会更加坚强
 感恩一切，正是有了他们，你才会有存在的价值，若没有了他们，你就失去了&quot;你&quot;的意义
</code></pre><h3 id="-"><strong>积极进取</strong></h3>
<pre><code> 不断积极进取，不断布施，给他人以快乐，给他人以感动，来回馈给他们让你存在的意义
</code></pre><h3 id="-"><strong>真</strong></h3>
<pre><code> 待人真诚、做事真诚
 发现真诚、发扬真诚
</code></pre><h3 id="-"><strong>善</strong></h3>
<pre><code> 待人友善、对事和善
 发现善良、发扬善良
</code></pre><h3 id="-"><strong>美</strong></h3>
<pre><code> 给人予美，给事予美
 发现真美、发扬真美
</code></pre><p>只要人人都献出一点爱，世界将变成美好的人间。    </p>
]]></content>
    <summary type="html"><![CDATA[<h3 id="-">从今天起，我要做一个快乐的人，忘记过去不开心的一切。</h3>
<h3 id="-more-">从今天起，我用一生的时间去追求至真至善至美，细心发现身边的真、善、美！]]></summary>
    
      <category term="life" scheme="http://loveliuli.com/tags/life/"/>
    
      <category term="生活" scheme="http://loveliuli.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux测试即时网速]]></title>
    <link href="http://loveliuli.com/2015/04/12/script/script_01/"/>
    <id>http://loveliuli.com/2015/04/12/script/script_01/</id>
    <published>2015-04-12T01:45:08.000Z</published>
    <updated>2014-07-31T14:22:47.000Z</updated>
    <content type="html"><![CDATA[<h3 id="-linux-more-">平时在测试客户端网速时,linux上没有好的工具,只好自己写脚本来进行测试,以下是我平时实用的一个测试脚本工具,比较简单,仅供参考.<a id="more"></a></h3>
<h3 id="cat-bw_test-sh">Cat bw_test.sh</h3>
<pre><code>#!/bin/bash
out()
{
exit
}

trap &quot;out&quot; 2

while true
do
string1=`ifconfig $1 | grep &quot;bytes&quot; | awk &#39;{printf $2}&#39;`
rx1=${string1##bytes:}
string2=`ifconfig $1 | grep &quot;bytes&quot; | awk &#39;{printf $6}&#39;`
tx1=${string2##bytes:}
sleep 1
clear
string3=`ifconfig $1 | grep &quot;bytes&quot; | awk &#39;{printf $2}&#39;`
rx2=${string3##bytes:}
string4=`ifconfig $1 | grep &quot;bytes&quot; | awk &#39;{printf $6}&#39;`
tx2=${string4##bytes:}
#echo $rx1
#echo $rx2
temp=`expr $rx2 - $rx1`
r1=`expr $temp / 1024`
echo 当前下载速度:$r1 kB/s
temp=`expr $tx2 - $tx1`
r2=`expr $temp / 1024`
echo 当前上传速度:$r2 KB/s
done
</code></pre>]]></content>
    <summary type="html"><![CDATA[<h3 id="-linux-more-">平时在测试客户端网速时,linux上没有好的工具,只好自己写脚本来进行测试,以下是我平时实用的一个测试脚本工具,比较简单,仅供参考.]]></summary>
    
      <category term="script" scheme="http://loveliuli.com/tags/script/"/>
    
      <category term="脚本" scheme="http://loveliuli.com/categories/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Zabbix远程执行命令]]></title>
    <link href="http://loveliuli.com/2014/08/14/monitor/monitor_06/"/>
    <id>http://loveliuli.com/2014/08/14/monitor/monitor_06/</id>
    <published>2014-08-14T05:09:12.000Z</published>
    <updated>2014-08-14T03:37:18.000Z</updated>
    <content type="html"><![CDATA[<p>本文主要讲述Zabbix远程执行命令.<a id="more"></a></p>
<p>本教程是测试zabbix的远程执行功能,比较简单,点拨思路,自己发散.</p>
<h3 id="-item-">一.创建item和触发器</h3>
<p>1.1 创建item
我这里是测试服务irqbalance,当服务irqbalance停止后,zabbix触发后,会自动拉起irqbalance服务.
Item:
UserParameter=xsj.irq.sum,ps xua|grep -w  &quot;irqbalance&quot;|grep -v grep|wc -l
1.2 创建触发器:</p>
<p><img src="http://ww1.sinaimg.cn/large/b7ec873bgw1ejbzxgcgeoj20pa0dl75a.jpg" alt="创建触发器"></p>
<h3 id="-">二.创建脚本或者命令</h3>
<p>2.1 如果你使用脚本,需要提前写好脚本,记得chmod755以及chow zabbix.命令的话,直接使用sudo执行.考虑到安全问题,这里的sudo控制最好细化.
2.2 本例使用sudo /etc/init.d/irqbalance start来进行测试</p>
<h3 id="-sudo-">三.开启sudo权限</h3>
<p>下例是授权zabbix无密码允许netstat命令:
<strong>授权zabbix用户无密码运行netstat命令</strong></p>
<pre><code>chmod +w /etc/sudoers 
sed -i &#39;s/^\(Defaults\s\+requiretty\)/#\1/&#39; /etc/sudoers
grep -q &#39;^zabbix ALL=(ALL).*netstat&#39; /etc/sudoers || echo &#39;zabbix ALL=(ALL)       NOPASSWD: /bin/netstat&#39; &gt;&gt; /etc/sudoers
chmod 440 /etc/sudoers
</code></pre><p>我们只是使用irqbalance 服务来测试,所以比较简单,visudo最后添加一行:</p>
<pre><code>zabbix ALL=(ALL)       NOPASSWD: /etc/init.d/irqbalance start
</code></pre><h3 id="-action">四.创建action</h3>
<p><img src="http://ww2.sinaimg.cn/large/b7ec873bgw1ejc029sm4rj20uy0argnh.jpg" alt="创建action"></p>
<p><img src="http://ww1.sinaimg.cn/large/b7ec873bgw1ejc045a5crj20uu0lf41z.jpg" alt="创建action"></p>
<h3 id="-">五.测试</h3>
<p>测试过程:关闭irqbalance服务,web界面查看告警以及命令执行情况.<br><strong>注意事项</strong>:
1.On some systems sudoers file will prevent non-local users from executing commands. To change this, comment out <strong>requiretty</strong> option in /etc/sudoers.
2.Make sure that the <strong>EnableRemoteCommands</strong> parameter is <strong>set to 1</strong> and uncommented. Restart agent daemon if changing this parameter.</p>
]]></content>
    <summary type="html"><![CDATA[<p>本文主要讲述Zabbix远程执行命令.]]></summary>
    
      <category term="monitor" scheme="http://loveliuli.com/tags/monitor/"/>
    
      <category term="监控" scheme="http://loveliuli.com/categories/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Zabbix触发器函数学习]]></title>
    <link href="http://loveliuli.com/2014/08/08/monitor/monitor_05/"/>
    <id>http://loveliuli.com/2014/08/08/monitor/monitor_05/</id>
    <published>2014-08-08T05:09:12.000Z</published>
    <updated>2014-08-11T01:12:48.000Z</updated>
    <content type="html"><![CDATA[<p>本文主要讲述zabbix触发器函数.<a id="more"></a></p>
<h3 id="1-abschange">1.abschange</h3>
<pre><code>参数:缺省
值类型:float, int, str, text, log
返回值解析:    Returns absolute difference between last and previous values.
            For strings:
            0 - values are equal
            1 - values differ
`abschange函数`
对于数字类型的处理方式:返回最后一个值和倒数第二个值的绝对不同,也就是返回一个正数
对于字符串类型的处理方式:返回0说明值没变化,返回1说明值有变化
</code></pre><h3 id="2-change">2.change</h3>
<pre><code>参数:缺省
值类型:float, int, str, text, log
返回值解析:    Returns difference between last and previous values.
            For strings:
            0 - values are equal
            1 - values differ
`change函数`
对于数字类型的处理方式:返回最后一个值和倒数第二个值的差,也就是返回一个数值,可正可负可为零
对于字符串类型的处理方式:返回0说明值没变化,返回1说明值有变化
</code></pre><h3 id="3-avg">3.avg</h3>
<pre><code>参数:sec or #num
值类型:float, int
返回值解析:
一段时间的平均值.这段时间可以设置为秒或者一个收集值的个数(前面用一个#符号,例如:#5-最近5个值),这是第一个参数
函数接收秒,也可以是一个时间段,当需要对比当前平均值和指定时间段的时候,非常有用.例如:avg(3600,86400)将会返回一天前的一小时内的平均值.
参数 **时间段**从1.8.2开始支持.
</code></pre><h3 id="4-band">4.band</h3>
<pre><code>参数:sec or #num
值类型:int
返回值解析:
返回值 为一个监控项和一个掩码的按位与.
第一个参数为秒或者#num
第二个参数是掩码(强制性的)是一个64位无符号整数.(0 - 18446744073709551615).
第三个参数是time_shift
这个函数从zabbix2.2.0开始支持.
</code></pre><h3 id="5-count">5.count</h3>
<pre><code>参数:sec or #num
值类型:float, int, str, text, log
返回值解析:
一段时间内采集值的个数.这段时间可以设置成秒或者一个数字(用#前缀,表示多少个),这是第一个参数.
函数接收第二个可选参数和第三个可选参数以及第四个time_shift参数.
对于样式:正数值-精确匹配;浮点值-匹配到0.000001
支持操作符:
eq-等于
ne-不等于
gt-大于
ge-大于等于
lt-小于
le-小于等于
like-包含
band-按位与. 这个函数从zabbix2.2.0开始支持.
如果有band参数,则第二个参数为分数形式,比较值/掩码
如果按位与的结果等于被比较数,则值被计数一次,如果被计较值和掩码相等,只需要指定掩码,无需/.
对于整形监控项:操作符eq(默认),ne, gt, ge, lt, le, band 均被支持.
对于浮点型监控项:操作符eq(默认),ne, gt, ge, lt, le, band 均被支持.
对于字符串,文本和log监控项:操作符like(默认的),eq,ne均被支持.
例子:
count(600) -最近十分钟值的个数.
count(600,12) - 最近十分钟的值为12的个数.
count(600,12,&quot;gt&quot;) - 最近十分钟的值大于12的个数.
count(#10,12,&quot;gt&quot;) - 最近10个值大于12的个数.
count(600,12,&quot;gt&quot;,86400) - 一天前最近十分钟的值大于12的个数.
count(600,6/7,&quot;band&quot;) - 最近十分钟监控项有二进制有110的个数.
count(600,,,86400) - 一天前最近十分钟值的个数.
#num 参数从Zabbix 1.6.1开始支持.
time_shift 参数从zabbix1.8.2开始支持.
</code></pre><h3 id="6-date">6.date</h3>
<pre><code>参数:缺省
值类型:any
返回值解析:
返回当前日期,以YYYYMMDD格式.例如:20031025
</code></pre><h3 id="7-dayofmonth">7.dayofmonth</h3>
<pre><code>参数:缺省
值类型:any
返回值解析:
返回一个月(1~31)中的天.这个函数从1.8.5开始支持.
</code></pre><h3 id="8-dayofweek">8.dayofweek</h3>
<pre><code>参数:缺省
值类型:any
返回值解析:
返回一周中的某一天.例如:Mon-1 ,sun-7
</code></pre><h3 id="9-delta">9.delta</h3>
<pre><code>参数:sec or #num
值类型:float, int
返回值解析:
返回一段时间内最大值和最小值的不同.可以通过设置第一个参数为秒和#.
从1.8.2版本起,支持秒和可选的time_shift参数.例子参考avg()函数.
</code></pre><h3 id="10-diff">10.diff</h3>
<pre><code>参数:缺省
值类型:float, int, str, text, log
返回值解析:
1-最后一个和倒数第二个值不同
0-相反
</code></pre><h3 id="11-fuzzytime">11.fuzzytime</h3>
<pre><code>参数:sec
值类型:float, int
返回值解析:
返回值为1,如果和zabbix server的时间戳相差N秒,否则为0
痛楚使用system.localtime来监测本地时间是否与zabbix server同步
</code></pre><h3 id="12-iregexp">12.iregexp</h3>
<pre><code>参数:1st - string, 2nd - sec or #num
值类型:str, log, text
返回值解析:
本函数是对于大小写不敏感的正则表达式.
</code></pre><h3 id="13-last">13.last</h3>
<pre><code>参数:sec or #num
值类型:float, int, str, text, log
返回值解析:
最近最新的值,参数:
sec-忽略
#num-最近的N个值
例如:
last(0)也等于last(#1)
last(#3)-最近的第三个值
last也支持time_shift参数,例如:last(0,86400)将返回一天前的最近值.
zabbix不能保证值的精确顺序,如果在历史记录里面一秒钟存在两个值的话.
参数#num从zabbix1.6.2开始支持.
参数time_shift从zabbix1.8.2开始支持.
</code></pre><h3 id="15-logseverity">15.logseverity</h3>
<pre><code>参数:缺省
值类型:log
返回值解析:
返回最后获得的log条目的级别,参数缺省.
0- 默认级别
N-级别(整数,对于windows时间log有用:1 - Information, 2 - Warning, 4 - Error, 7 - Failure Audit, 8 - Success Audit, 9 - Critical, 10 - Verbose)
Zabbix 采集log级别从windows的日志系统.
</code></pre><h3 id="16-logsource">16.logsource</h3>
<pre><code>参数:string
值类型:log
返回值解析:
检查最新的log条目是否和参数匹配.
0-不匹配
1-匹配
一般针对于windows事件log.例如: logsource(&quot;VMware Server&quot;).
</code></pre><h3 id="17-max">17.max</h3>
<pre><code>参数:sec or #num
值类型:float,int
返回值解析:
一段时间的最大值.这段时间可以设置为秒或者一个收集值的个数(前面用一个#符号,例如:#5-最近5个值),这是第一个参数
从zabbix1.8.2开始支持秒,可选参数time_shift.
</code></pre><h3 id="18-min">18.min</h3>
<pre><code>参数:sec or #num
值类型:float,int
返回值解析:
一段时间的最小值.这段时间可以设置为秒或者一个收集值的个数(前面用一个#符号,例如:#5-最近5个值),这是第一个参数
从zabbix1.8.2开始支持秒,可选参数time_shift.
</code></pre><h3 id="19-nodata">19.nodata</h3>
<pre><code>参数:sec 
值类型: any
返回值解析:
返回值1-如果一段时间没有接收到数据,时间段不应该少于30s
返回值0-相反
</code></pre><h3 id="20-now">20.now</h3>
<pre><code>参数:缺省
值类型:any
返回值解析:
返回自从1970年1月1日00:00:00来的秒数.
</code></pre><h3 id="21-prev">21.prev</h3>
<pre><code>参数:缺省
值类型:float, int, str, text, log
返回值解析:
返回历史值,参数缺省.
类似last(#2)
</code></pre><h3 id="22-regexp">22.regexp</h3>
<pre><code>参数:1st - string, 2nd - sec or #num
值类型: str, text, log
返回值解析:
检查最新值是否匹配正则表达式.参数为正则表达式,POSIX扩展格式.
第二个可选参数是用来采集数据的秒数或者收集值的数量.这样的情况下,将有一个以上的值被处理.
这个函数大小写敏感.
返回值为0:发现有匹配的
返回值为1:没有发现匹配的
</code></pre><h3 id="23-str">23.str</h3>
<pre><code>参数:1st - string, 2nd - sec or #num
值类型:str, text, log
返回值解析:
发现最新值中的字符串,参数为定义被发现的字符串,大小写敏感.
第二个可选参数是用来采集数据的秒数或者收集值的数量.这样的情况下,将有一个以上的值被处理.
返回值为0:发现有匹配的
返回值为1:没有发现匹配的
</code></pre><h3 id="24-strlen">24.strlen</h3>
<pre><code>参数:sec or #num
值类型:str, text, log
返回值解析:
最新值(字符)的长度
参数 和last的类似.
例如:
strlen(0) 等同于 strlen(#1)
strlen(#3) - 最新的第三个值的长度
strlen(0,86400) - 一天前最新值的长度
</code></pre><h3 id="25-sum">25.sum</h3>
<pre><code>参数:sec or #num
值类型:float, int
返回值解析:
一段时间内采集值求和.这段时间可以设置成秒或者一个数字(用#前缀,表示多少个),这是第一个参数.
从zabbix1.8.2开始支持秒,可选参数time_shift.
</code></pre>]]></content>
    <summary type="html"><![CDATA[<p>本文主要讲述zabbix触发器函数.]]></summary>
    
      <category term="monitor" scheme="http://loveliuli.com/tags/monitor/"/>
    
      <category term="监控" scheme="http://loveliuli.com/categories/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Zabbix低层次发现初体验]]></title>
    <link href="http://loveliuli.com/2014/08/05/monitor/monitor_04/"/>
    <id>http://loveliuli.com/2014/08/05/monitor/monitor_04/</id>
    <published>2014-08-05T09:36:12.000Z</published>
    <updated>2014-08-04T09:51:29.000Z</updated>
    <content type="html"><![CDATA[<p>本文主要讲述zabbix低层次发现硬盘设备.详细过程如下.<a id="more"></a></p>
<h3 id="1-">1.创建模板</h3>
<p><img src="http://ww4.sinaimg.cn/large/b7ec873bgw1ej0qvz7acjj21hb06mdip.jpg" alt="创建模板"></p>
<h3 id="2-item-prototypes">2.创建item prototypes</h3>
<p><img src="http://ww3.sinaimg.cn/large/b7ec873bgw1ej0qwfju8lj21g20g0adf.jpg" alt="创建item prototypes"></p>
<h3 id="3-graph-prototypes">3.创建graph prototypes</h3>
<p><img src="http://ww2.sinaimg.cn/large/b7ec873bgw1ej0qwx6898j21hc0ag43r.jpg" alt="创建graph prototypes">    </p>
<h3 id="4-agent-">4.Agent端配置</h3>
<p>agent端的配置文件需要进行如下配置:</p>
<pre><code>UserParameter=custom.vfs.dev.discovery,/bin/sh /opt/zabbix/disk.sh
# reads completed successfully
UserParameter=custom.vfs.dev.read.ops[*],cat /proc/diskstats | egrep $1 | head -1 | awk &#39;{print $$4}&#39;
# sectors read
UserParameter=custom.vfs.dev.read.sectors[*],cat /proc/diskstats | egrep $1 | head -1 | awk &#39;{print $$6}&#39;
# time spent reading (ms)
UserParameter=custom.vfs.dev.read.ms[*],cat /proc/diskstats | egrep $1 | head -1 | awk &#39;{print $$7}&#39;
# writes completed
UserParameter=custom.vfs.dev.write.ops[*],cat /proc/diskstats | egrep $1 | head -1 | awk &#39;{print $$8}&#39;
# sectors written
UserParameter=custom.vfs.dev.write.sectors[*],cat /proc/diskstats | egrep $1 | head -1 | awk &#39;{print $$10}&#39;
# time spent writing (ms)
UserParameter=custom.vfs.dev.write.ms[*],cat /proc/diskstats | egrep $1 | head -1 | awk &#39;{print $$11}&#39;
# I/Os currently in progress
UserParameter=custom.vfs.dev.io.active[*],cat /proc/diskstats | egrep $1 | head -1 | awk &#39;{print $$12}&#39;
# time spent doing I/Os (ms)
UserParameter=custom.vfs.dev.io.ms[*],cat /proc/diskstats | egrep $1 | head -1 | awk &#39;{print $$13}&#39;
</code></pre><p>[root@pay-03-vmain:/opt/zabbix]# cat disk.sh </p>
<pre><code>#!/bin/bash
diskarray=(`cat /proc/diskstats |grep -E &quot;\bvd[abcdefg]\b|\bsd[abcdefg]\b|\bc0d0p[0~9]\b&quot;|grep -i &quot;\b$1\b&quot;|awk &#39;{print $3}&#39;|sort|uniq   2&gt;/dev/null`)
length=${#diskarray[@]}
printf &quot;{\n&quot;
printf  &#39;\t&#39;&quot;\&quot;data\&quot;:[&quot;
for ((i=0;i&lt;$length;i++))
do
    printf &#39;\n\t\t{&#39;
    printf &quot;\&quot;{#DISK}\&quot;:\&quot;${diskarray[$i]}\&quot;}&quot;
    if [ $i -lt $[$length-1] ];then
            printf &#39;,&#39;
    fi
done
printf  &quot;\n\t]\n&quot;
printf &quot;}\n&quot;
</code></pre><p>注意chown -R zabbix:zabbix /opt/zabbix/disk.sh</p>
<h3 id="5-">5.效果图</h3>
<p><img src="http://ww4.sinaimg.cn/large/b7ec873bgw1ej0qz0o7uoj21gr0f647j.jpg" alt="自动发现效果图"></p>
]]></content>
    <summary type="html"><![CDATA[<p>本文主要讲述zabbix低层次发现硬盘设备.详细过程如下.]]></summary>
    
      <category term="monitor" scheme="http://loveliuli.com/tags/monitor/"/>
    
      <category term="监控" scheme="http://loveliuli.com/categories/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ZABBIX的zatree插件安装和优化]]></title>
    <link href="http://loveliuli.com/2014/08/01/monitor/monitor_03/"/>
    <id>http://loveliuli.com/2014/08/01/monitor/monitor_03/</id>
    <published>2014-08-01T13:36:12.000Z</published>
    <updated>2014-08-01T13:37:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-zabbix-zatree-">一.zabbix的zatree插件安装</h2>
<p>zabbix最近出了个比较有用的插件zatree,能够将所有的graph总体显示,而且可以根据关键字和时间进行查询以及汇总.<a id="more"></a>
以下是zabbix-2.2.*版本的zatree安装,其他方式大家也可以去github项目获取安装方式.
    [github项目链接]: <a href="https://github.com/spide4k/zatree/tree/master/zabbix-2.2.x" target="_blank">https://github.com/spide4k/zatree/tree/master/zabbix-2.2.x</a>  嘿嘿,下面开始插件安装吧.</p>
<h3 id="1-">1.下载文件</h3>
<pre><code>git clone https://github.com/spide4k/zatree.git zatree
</code></pre><h3 id="2-">2.复制相关文件</h3>
<p>假如zabbix web目录位置在/var/www/zabbix,定义zabbix目录</p>
<pre><code>ZABBIX_PATH=/var/www/zabbix
</code></pre><p>复制相关文件和目录</p>
<pre><code>cp -rf zatree/zabbix-2.2.x $ZABBIX_PATH/zatree

cd $ZABBIX_PATH/zatree/addfile

cp -f CLineGraphDraw_Zabbix.php CGraphDraw_Zabbix.php CImageTextTable_Zabbix.php $ZABBIX_PATH/include/classes/graphdraw/

cp -f zabbix.php zabbix_chart.php $ZABBIX_PATH/

cp -f CItemValue.php $ZABBIX_PATH/api/classes/

cp -f menu.inc.php $ZABBIX_PATH/include/
cp -f main.js $ZABBIX_PATH/js/

cp -f API.php $ZABBIX_PATH/include/classes/api/
</code></pre><h3 id="3-web-interface-">3.支持web interface,修改配置文件</h3>
<pre><code>vi $ZABBIX_PATH/zatree/zabbix_config.php

&#39;user&#39;=&gt;&#39;xxx&#39;, //web登陆的用户名

&#39;passowrd&#39;=&gt;&#39;xxx&#39;, //web登陆的密码
</code></pre><h2 id="-zatree-">二.zatree优化之左侧栏目按照主机组显示</h2>
<p>admin用户效果图:</p>
<p><img src="http://ww4.sinaimg.cn/large/b7ec873bgw1eixfrybl7kj20gr04vjru.jpg" alt="admin用户看到的组效果"></p>
<p>普通用户效果图:</p>
<p><img src="http://ww1.sinaimg.cn/large/b7ec873bgw1eixg0haajlj20h5038gls.jpg" alt="普通用户看到的组效果"></p>
<p>优化法如下，这里针对zatree的zabbix-2.2.x版本做修改，方法同样适合zabbix-2.0.x版本：
进入zatree目录，修改以下两个文件：
<strong>第一步：zabbix_ajax.php</strong>
传递$_COOKIE[&#39;zbx_sessionid&#39;]给hostgroupGet()，获取当前用户具有readable权限的主机组列表。</p>
<pre><code>$groups = $zabbixApi-&gt;hostgroupGet(array(&quot;output&quot; =&gt; &quot;extend&quot;, &quot;monitored_hosts&quot; =&gt; true)
</code></pre><p>修改为：</p>
<pre><code>if(isset($_COOKIE[&#39;zbx_sessionid&#39;])){
    $groups = $zabbixApi-&gt;hostgroupGet(array(&quot;output&quot; =&gt; &quot;extend&quot;, &quot;monitored_hosts&quot; =&gt; true), &#39;&#39;, $_COOKIE[&#39;zbx_sessionid&#39;]);
        } else {
        $groups = $zabbixApi-&gt;hostgroupGet(array(&quot;output&quot; =&gt; &quot;extend&quot;, &quot;monitored_hosts&quot; =&gt; true));
    }
</code></pre><p><strong>第二步：ZabbixApiAbstract.class.php</strong>
修改2594行hostgroupGet方法，添加$sessionid形参。当传入$sessionid参数时，设置$this-&gt;auth的值为$sessionid。</p>
<pre><code>public function hostgroupGet($params=array(), $arrayKeyProperty=&#39;&#39;)
{
    // get params array for request
    $params = $this-&gt;getRequestParamsArray($params);

    // request
    return $this-&gt;request(&#39;hostgroup.get&#39;, $params, $arrayKeyProperty);
}
</code></pre><p>修改为：</p>
<pre><code>public function hostgroupGet($params=array(), $arrayKeyProperty=&#39;&#39;, $sessionid=&#39;&#39;)
{
    // get params array for request
    $params = $this-&gt;getRequestParamsArray($params);

    // request
    if (isset($sessionid))
        $this-&gt;auth = $sessionid;
    return $this-&gt;request(&#39;hostgroup.get&#39;, $params, $arrayKeyProperty);
}
</code></pre><h3 id="-zatree-http-basic-authorization-zabbix-api">三.优化zatree支持HTTP Basic Authorization认证访问zabbix API</h3>
<p>考虑到让zabbix更加安全,所以采用了https的方式进行访问,但是这是zatree标签页打开时,出现了一堆错误.如下图所示:</p>
<p><img src="http://ww4.sinaimg.cn/large/b7ec873bgw1eixg86gkn0j215502ptag.jpg" alt="报错"></p>
<h2 id="-">优化过程如下:</h2>
<p>进入zatree目录，修改以下四个文件：
<strong>步骤一、修改zabbix_config.php</strong>
添加HTTP Basic Authorization认证用户名和密码参数。如果没有设置HTTP Basic Authorization认证，http_user和http_password的值为空就行。</p>
<pre><code>&lt;?php 
global $zabbix_api_config;

$zabbix_api_config=array(
&#39;api_url&#39;=&gt;&#39;api_jsonrpc.php&#39;,
&#39;http_user&#39;=&gt;&#39;xxxxx&#39;,
&#39;http_password&#39;=&gt;&#39;xxxxx&#39;,
&#39;user&#39;=&gt;&#39;Admin&#39;,
&#39;passowrd&#39;=&gt;&#39;xxxxx&#39;,
&#39;graph_url&#39;=&gt;&#39;zabbix_chart.php&#39;,
);

?&gt;
</code></pre><p><strong>步骤二、修改zabbix_ajax.php第33行，添加当有HTTP认证时的$url_http。</strong>
    $url_http = dirname(dirname(&#39;http://&#39; . $_SERVER[&#39;HTTP_HOST&#39;] . $_SERVER[&quot;REQUEST_URI&quot;]));</p>
<p>修改为：</p>
<pre><code>if (!empty($zabbix_api_config[&#39;http_user&#39;]) &amp;&amp; !empty($zabbix_api_config[&#39;http_password&#39;])) {
            $url_http = dirname(dirname(&#39;https://&#39; . trim($zabbix_api_config[&#39;http_user&#39;]) . &#39;:&#39; . trim($zabbix_api_config[&#39;http_password&#39;]) . &#39;@&#39; . $_SERVER[&#39;HTTP_HOST&#39;] . $_SERVER[&quot;REQUEST_URI&quot;]));
    } else {
            $url_http = dirname(dirname(&#39;https://&#39; . $_SERVER[&#39;HTTP_HOST&#39;] . $_SERVER[&quot;REQUEST_URI&quot;]));
    }
</code></pre><p><strong>步骤三、修改graph.php第141行，添加当有HTTP认证时的$url_http。</strong>
    $url_http = dirname(dirname(&#39;http://&#39; . $_SERVER[&#39;HTTP_HOST&#39;] . $_SERVER[&quot;REQUEST_URI&quot;]));</p>
<p>修改为：</p>
<pre><code>if (!empty($zabbix_api_config[&#39;http_user&#39;]) &amp;&amp; !empty($zabbix_api_config[&#39;http_password&#39;])) {
            $url_http = dirname(dirname(&#39;https://&#39; . trim($zabbix_api_config[&#39;http_user&#39;]) . &#39;:&#39; . trim($zabbix_api_config[&#39;http_password&#39;]) . &#39;@&#39; . $_SERVER[&#39;HTTP_HOST&#39;] . $_SERVER[&quot;REQUEST_URI&quot;]));
    } else {
            $url_http = dirname(dirname(&#39;https://&#39; . $_SERVER[&#39;HTTP_HOST&#39;] . $_SERVER[&quot;REQUEST_URI&quot;]));
    }
</code></pre><p><strong>步骤四、修改big_graph.php第88行，添加当有HTTP认证时的$url_http。</strong>
    $url_http = dirname(dirname(&#39;http://&#39; . $_SERVER[&#39;HTTP_HOST&#39;] . $_SERVER[&quot;REQUEST_URI&quot;]));</p>
<p>修改为：</p>
<pre><code>if (!empty($zabbix_api_config[&#39;http_user&#39;]) &amp;&amp; !empty($zabbix_api_config[&#39;http_password&#39;])) {
            $url_http = dirname(dirname(&#39;https://&#39; . trim($zabbix_api_config[&#39;http_user&#39;]) . &#39;:&#39; . trim($zabbix_api_config[&#39;http_password&#39;]) . &#39;@&#39; . $_SERVER[&#39;HTTP_HOST&#39;] . $_SERVER[&quot;REQUEST_URI&quot;]));
    } else {
            $url_http = dirname(dirname(&#39;https://&#39; . $_SERVER[&#39;HTTP_HOST&#39;] . $_SERVER[&quot;REQUEST_URI&quot;]));
    } 
</code></pre>]]></content>
    <summary type="html"><![CDATA[<h2 id="-zabbix-zatree-">一.zabbix的zatree插件安装</h2>
<p>zabbix最近出了个比较有用的插件zatree,能够将所有的graph总体显示,而且可以根据关键字和时间进行查询以及汇总.]]></summary>
    
      <category term="monitor" scheme="http://loveliuli.com/tags/monitor/"/>
    
      <category term="监控" scheme="http://loveliuli.com/categories/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Zabbix Agent安装和配置]]></title>
    <link href="http://loveliuli.com/2014/07/31/monitor/monitor_02/"/>
    <id>http://loveliuli.com/2014/07/31/monitor/monitor_02/</id>
    <published>2014-07-31T05:11:12.000Z</published>
    <updated>2014-07-31T06:12:16.000Z</updated>
    <content type="html"><![CDATA[<h3 id="1-zabbix-2-2-4-tar-gz-">1.下载安装包(zabbix-2.2.4.tar.gz)</h3>
<p><a href="http://www.zabbix.com/download.php" target="_blank">http://www.zabbix.com/download.php</a>
由于目前server安装的最新稳定版本2.2.4,所以agent端安装不得高于server端版本,且agent端一般改动比较小,所以安装2.2.1(stable)和2.2.4(stable)都行.<a id="more"></a>
说明:由于线上已经安装了一套agent环境,为了不引起冲突,所以本次安装时,选择了源码编译,自己指定安装路径和进程启动用户.正常情况下建议使用rpm安装.</p>
<h3 id="2-">2.安装</h3>
<h4 id="2-1-zabbix-etc-zabbix_agentd_om">2.1 zabbix安装目录: /etc/zabbix_agentd_om</h4>
<pre><code>mkdir -p /etc/zabbix_agentd_om
</code></pre><h4 id="2-2-zabbix-">2.2 进程启动用户zabbix:</h4>
<pre><code>groupadd  zabbix -g 200
useradd zabbix -g zabbix -u 200 
</code></pre><h4 id="2-3-log-pid-">2.3 创建log和pid文件目录</h4>
<pre><code>mkdir -p /var/log/zabbix
chown zabbix:zabbix /var/log/zabbix
mkdir -p /var/run/zabbix
chown zabbix:zabbix /var/run/zabbix
</code></pre><h4 id="2-4-">2.4 安装</h4>
<pre><code>tar zxvf zabbix-2.2.4.tar.gz
cd zabbix-2.2.4
./configure --prefix=/etc/zabbix_agentd_om --enable-agent
make &amp;&amp; make install
</code></pre><h3 id="3-">3.修改配置</h3>
<pre><code>mkdir -p /etc/zabbix_agentd_om/etc/zabbix_agentd.conf.d/
cat /dev/null &gt; /etc/zabbix_agentd_om/etc/zabbix_agentd.conf
vi /etc/zabbix_agentd_om/etc/zabbix_agentd.conf
PidFile=/var/run/zabbix/zabbix_agented_om.pid
LogFile=/var/log/zabbix/zabbix_agented_om.log
LogFileSize=0
erver=42.62.**.**
ListenPort=10060
ServerActive=42.62.**.**
Hostname=Zabbix server
Include=/etc/zabbix_agentd_om/etc/zabbix_agentd.conf.d/
</code></pre><h3 id="4-">4.开启和关闭脚本添加</h3>
<p>将以下脚本添加到/etc/init.d/目录下,并给予执行权限
    cat /etc/init.d/zabbix_agent_om </p>
<pre><code>#!/bin/sh
# chkconfig: - 86 14
# description: Zabbix agent daemon
# processname: zabbix_agentd
# config: /etc/zabbix_agentd_om/etc/zabbix_agentd.conf
# Source function library.
. /etc/rc.d/init.d/functions
if [ -x /etc/zabbix_agentd_om/sbin/zabbix_agentd ]; then
exec=etc/zabbix_agentd_om/sbin/zabbix_agentd
else
exit 5
fi
prog=${exec##*/}
conf=/etc/zabbix_agentd_om/etc/zabbix_agentd.conf
lockfile=/var/lock/subsys/zabbix-agented
start()
{
echo -n $&quot;Starting Zabbix agent: &quot;
daemon $exec -c $conf
rv=$?
echo
[ $rv -eq 0 ] &amp;&amp; touch $lockfile
return $rv
}
stop()
{
echo -n $&quot;Shutting down Zabbix agent: &quot;
killall -u zabbix
rv=$?
echo
[ $rv -eq 0 ] &amp;&amp; rm -f $lockfile
return $rv
}
restart()
{
stop
start
}
case &quot;$1&quot; in
start|stop|restart)
    $1
    ;;
force-reload)
    restart
    ;;
status)
    status $prog
    ;;
*)
    echo $&quot;Usage: $0 {start|stop|status|restart|try-restart|force-reload}&quot;
    exit 2
    ;;
esac
</code></pre><h3 id="5-">5.开启和关闭方法:</h3>
<pre><code>chmod 755 /etc/init.d/zabbix_agent_om
service zabbix_agent_om start
service zabbix_agent_om stop    
</code></pre><h3 id="6-">6.设置开机启动:</h3>
<pre><code>chkconfig --add zabbix_agent_om 
chkconfig zabbix_agent_om on
</code></pre><h3 id="7-">7.防火墙设置</h3>
<p>在agent需要允许能和server端通讯,记得保存iptables.</p>
]]></content>
    <summary type="html"><![CDATA[<h3 id="1-zabbix-2-2-4-tar-gz-">1.下载安装包(zabbix-2.2.4.tar.gz)</h3>
<p><a href="http://www.zabbix.com/download.php" target="_blank">http://www.zabbix.com/download.php</a>
由于目前server安装的最新稳定版本2.2.4,所以agent端安装不得高于server端版本,且agent端一般改动比较小,所以安装2.2.1(stable)和2.2.4(stable)都行.]]></summary>
    
      <category term="monitor" scheme="http://loveliuli.com/tags/monitor/"/>
    
      <category term="监控" scheme="http://loveliuli.com/categories/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Not all processes could be identified]]></title>
    <link href="http://loveliuli.com/2014/07/30/monitor/monitor_01/"/>
    <id>http://loveliuli.com/2014/07/30/monitor/monitor_01/</id>
    <published>2014-07-30T08:36:12.000Z</published>
    <updated>2014-07-31T06:13:56.000Z</updated>
    <content type="html"><![CDATA[<p><strong>Zabbix log里面发现&quot;Not all processes could be identified&quot;报错</strong>
在zabbix_agentd.conf里添加了一条监控项:<a id="more"></a></p>
<pre><code>UserParameter=linux.people[*],netstat -antp|grep &#39;$1&#39;|grep -v LISTEN|wc -l
</code></pre><p>重启代理进程后,发现监控里的值为0，看了下日志发现不停地输出如下的log:</p>
<pre><code>(Not all processes could be identified, non-owned process info 
will not be shown, you would have to be root to see it all.)
</code></pre><p>一直没找到问题所在,虽然在server端采集数据是没有任何问题,但是客户端的log中会一直报这个错误,后来su到zabbix用户执行了一下该命令,才发现了问题所在. 
原来是netstat -lantup里的<strong>-p</strong>参数需要<strong>root</strong>用户才能使用,所以结果值总是为0.
修改如下:
UserParameter=linux.people[*],netstat -ant|grep &#39;$1&#39;|grep -v LISTEN|wc -l
重启后正常了.</p>
<p>不能使用root,有时候执行一些命令还确实不方便.为了能让zabbix执行一些需要root才能支持的命令、参数等，只有使用sudo，解决步骤如下：</p>
<pre><code># groupadd monitor
# usermod -G zabbix
# visudo -f /etc/sudoers                   #增加最后两行,并且注释掉Defaults    requiretty
#Defaults    requiretty          #一定要注释掉
Cmnd_Alias MONITORING = /bin/netstat,/sbin/sudo   #以后还需要添加什么命令添加到后面即可
%monitor        ALL=(root) NOPASSWD:MONITORING
</code></pre>]]></content>
    <summary type="html"><![CDATA[<p><strong>Zabbix log里面发现&quot;Not all processes could be identified&quot;报错</strong>
在zabbix_agentd.conf里添加了一条监控项:]]></summary>
    
      <category term="monitor" scheme="http://loveliuli.com/tags/monitor/"/>
    
      <category term="监控" scheme="http://loveliuli.com/categories/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[NFS报错：rpc.rquotad: unable to register service|mount: wrong fs type, bad option, bad superblock]]></title>
    <link href="http://loveliuli.com/2014/05/08/app/app_01_nfs_error/"/>
    <id>http://loveliuli.com/2014/05/08/app/app_01_nfs_error/</id>
    <published>2014-05-08T10:40:56.000Z</published>
    <updated>2014-05-23T10:30:26.000Z</updated>
    <content type="html"><![CDATA[<p>今天准备在正式环境测试一下puppet,搭建仓库后,需要搭建一个nfs来进行文件共享,让下面发agnet通过nfs安装.<a id="more"></a>
yum install nfs-utils成功后,启动nfs服务时,发现有如下报错信息:</p>
<pre><code>[root@master ~]# service nfsd start
nfsd: unrecognized service
[root@master ~]# service nfs start
Starting NFS services:  [  OK  ]
Starting NFS quotas: Cannot register service: RPC: Unable to receive; errno = Connection refused
rpc.rquotad: unable to register (RQUOTAPROG, RQUOTAVERS, udp).
[FAILED]
Starting NFS mountd: [FAILED]
Starting NFS daemon: rpc.nfsd: writing fd to kernel failed: errno 111 (Connection refused)
rpc.nfsd: unable to set any sockets for nfsd
[FAILED]
</code></pre><p>从原因来看是由于不能注册服务,RPC不能接收.网上一查,发现原因如下:</p>
<p>Redhat系列在6.0版本之后没有portmap服务控制rpc的启动，NFS和nfslock的启动需要向rpc进行注册，rpc不启动的话就会报错。</p>
<hr>
<p>解决方法：启动rpcbind&amp;rpcidmap rpcbind是6.0版本后默认的RPC服务，所以要先于nfs启动。
如果不启动rpcidmap则会造成用户权限的映射错误，用户的权限看起来是一串数字。
具体解决如下:</p>
<pre><code>[root@master ~]# service nfs start
Starting NFS services:  [  OK  ]
Starting NFS quotas: Cannot register service: RPC: Unable to receive; errno = Connection refused
rpc.rquotad: unable to register (RQUOTAPROG, RQUOTAVERS, udp).
[FAILED]
Starting NFS mountd: [FAILED]
Starting NFS daemon: rpc.nfsd: writing fd to kernel failed: errno 111 (Connection refused)
rpc.nfsd: unable to set any sockets for nfsd
[FAILED]
[root@master ~]# /etc/init.d/rpcbind start
Starting rpcbind: [  OK  ]
[root@master ~]# /etc/init.d/rpcidmapd start
Starting RPC idmapd: [  OK  ]
[root@master ~]# service nfs start
Starting NFS services:  [  OK  ]
Starting NFS quotas: [  OK  ]
Starting NFS mountd: [  OK  ]
Starting NFS daemon: [  OK  ]
[root@master ~]# 
</code></pre><hr>
<p>在客户端挂载nfs时,发现有如下问题:</p>
<pre><code>root@agent1 media]# /bin/mount -t nfs 10.20.102.154:/puppet /media/
mount: wrong fs type, bad option, bad superblock on 10.20.102.154:/puppet,
   missing codepage or helper program, or other error
   (for several filesystems (e.g. nfs, cifs) you might
   need a /sbin/mount.&lt;type&gt; helper program)
   In some cases useful info is found in syslog - try
   dmesg | tail  or so
</code></pre><p>解决方法是在客户端也需要启动rpcbind和rpcidmapd服务.</p>
<pre><code>[root@agent1 ~]# /etc/init.d/rpcbind start
Starting rpcbind: [  OK  ]
[root@agent1 ~]# /etc/init.d/rpcidmapd start
Starting RPC idmapd: [  OK  ]    
[root@agent1 ~]# mount -t nfs 10.20.102.154:/puppet /media
[root@agent1 ~]# df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/mapper/vg_centos6264-lv_root
                   25G   17G  6.2G  74% /
tmpfs                 1.5G     0  1.5G   0% /dev/shm
/dev/vda1             485M   51M  409M  11% /boot
10.20.102.154:/puppet
                   26G   17G  7.7G  68% /media
[root@agent1 ~]# 
</code></pre>]]></content>
    <summary type="html"><![CDATA[<p>今天准备在正式环境测试一下puppet,搭建仓库后,需要搭建一个nfs来进行文件共享,让下面发agnet通过nfs安装.]]></summary>
    
      <category term="application" scheme="http://loveliuli.com/tags/application/"/>
    
      <category term="应用" scheme="http://loveliuli.com/categories/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Welcome to my blog]]></title>
    <link href="http://loveliuli.com/2014/02/21/virtual/virtual_01/"/>
    <id>http://loveliuli.com/2014/02/21/virtual/virtual_01/</id>
    <published>2014-02-21T08:36:12.000Z</published>
    <updated>2014-05-23T09:54:20.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to my blog!.</p>
]]></content>
    
    
      <category term="virtualization" scheme="http://loveliuli.com/tags/virtualization/"/>
    
      <category term="虚拟化" scheme="http://loveliuli.com/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Welcome to my blog]]></title>
    <link href="http://loveliuli.com/2014/02/21/datebase/datebase_01/"/>
    <id>http://loveliuli.com/2014/02/21/datebase/datebase_01/</id>
    <published>2014-02-21T08:36:12.000Z</published>
    <updated>2014-05-23T09:51:08.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to my blog!.</p>
]]></content>
    
    
      <category term="database" scheme="http://loveliuli.com/tags/database/"/>
    
      <category term="数据库" scheme="http://loveliuli.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Welcome to my blog]]></title>
    <link href="http://loveliuli.com/2014/02/21/security/security_01/"/>
    <id>http://loveliuli.com/2014/02/21/security/security_01/</id>
    <published>2014-02-21T08:36:12.000Z</published>
    <updated>2014-05-23T10:39:32.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to my blog!.</p>
]]></content>
    
    
      <category term="security" scheme="http://loveliuli.com/tags/security/"/>
    
      <category term="安全" scheme="http://loveliuli.com/categories/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SED单行脚本快速参考]]></title>
    <link href="http://loveliuli.com/2014/02/21/command/commd_01/"/>
    <id>http://loveliuli.com/2014/02/21/command/commd_01/</id>
    <published>2014-02-21T08:36:12.000Z</published>
    <updated>2014-08-06T03:02:23.000Z</updated>
    <content type="html"><![CDATA[<p>SED单行脚本快速参考（Unix 流编辑器） 整理：Eric Pement  - 电邮：pemente[at]northpark[dot]edu  <a id="more"></a> </p>
<h3 id="-">在每一行后面增加一空行</h3>
<pre><code>sed G
</code></pre><h3 id="-">将原来的所有空行删除并在每一行后面增加一空行。</h3>
<h3 id="-">这样在输出的文本中每一行后面将有且只有一空行。</h3>
<pre><code>sed &#39;/^$/d;G&#39;
</code></pre><h3 id="-">在每一行后面增加两行空行</h3>
<pre><code>sed &#39;G;G&#39;
</code></pre><h3 id="-">将第一个脚本所产生的所有空行删除（即删除所有偶数行）</h3>
<pre><code>sed &#39;n;d&#39;
</code></pre><h3 id="-regex-">在匹配式样“regex”的行之前插入一空行</h3>
<pre><code>sed &#39;/regex/{x;p;x;}&#39;
</code></pre><h3 id="-regex-">在匹配式样“regex”的行之后插入一空行</h3>
<pre><code>sed &#39;/regex/G&#39;
</code></pre><h3 id="-regex-">在匹配式样“regex”的行之前和之后各插入一空行</h3>
<pre><code>sed &#39;/regex/{x;p;x;G;}&#39;
</code></pre><h2 id="-">编号：</h2>
<h3 id="-">为文件中的每一行进行编号（简单的左对齐方式）。这里使用了“制表符”</h3>
<h3 id="-tab-t-">（tab，见本文末尾关于&#39;\t&#39;的用法的描述）而不是空格来对齐边缘。</h3>
<pre><code>sed = filename | sed &#39;N;s/\n/\t/&#39;
</code></pre><h3 id="-">对文件中的所有行编号（行号在左，文字右端对齐）。</h3>
<pre><code>sed = filename | sed &#39;N; s/^/     /; s/ *\(.\{6,\}\)\n/\1  /&#39;
</code></pre><h3 id="-">对文件中的所有行编号，但只显示非空白行的行号。</h3>
<pre><code>sed &#39;/./=&#39; filename | sed &#39;/./N; s/\n/ /&#39;
</code></pre><h3 id="-wc-l-">计算行数 （模拟 &quot;wc -l&quot;）</h3>
<pre><code>sed -n &#39;$=&#39;
</code></pre><h2 id="-">文本转换和替代：</h2>
<h3 id="unix-dos-cr-lf-unix-">Unix环境：转换DOS的新行符（CR/LF）为Unix格式。</h3>
<pre><code>sed &#39;s/.$//&#39;                     # 假设所有行以CR/LF结束
sed &#39;s/^M$//&#39;                    # 在bash/tcsh中，将按Ctrl-M改为按Ctrl-V
sed &#39;s/\x0D$//&#39;                  # ssed、gsed 3.02.80，及更高版本
</code></pre><h3 id="unix-unix-lf-dos-">Unix环境：转换Unix的新行符（LF）为DOS格式。</h3>
<pre><code>sed &quot;s/$/`echo -e \\\r`/&quot;        # 在ksh下所使用的命令
sed &#39;s/$&#39;&quot;/`echo \\\r`/&quot;         # 在bash下所使用的命令
sed &quot;s/$/`echo \\\r`/&quot;           # 在zsh下所使用的命令
sed &#39;s/$/\r/&#39;                    # gsed 3.02.80 及更高版本
</code></pre><h3 id="dos-unix-lf-dos-">DOS环境：转换Unix新行符（LF）为DOS格式。</h3>
<pre><code>sed &quot;s/$//&quot;                      # 方法 1
sed -n p                         # 方法 2
</code></pre><h3 id="dos-dos-cr-lf-unix-">DOS环境：转换DOS新行符（CR/LF）为Unix格式。</h3>
<h3 id="-unxutils-sed-4-0-7-unxutils-">下面的脚本只对UnxUtils sed 4.0.7 及更高版本有效。要识别UnxUtils版本的</h3>
<h3 id="sed-text-help-">sed可以通过其特有的“--text”选项。你可以使用帮助选项（“--help”）看</h3>
<h3 id="-text-unxutils-dos">其中有无一个“--text”项以此来判断所使用的是否是UnxUtils版本。其它DOS</h3>
<h3 id="-sed-tr-">版本的的sed则无法进行这一转换。但可以用“tr”来实现这一转换。</h3>
<pre><code>sed &quot;s/\r//&quot; infile &gt;outfile     # UnxUtils sed v4.0.7 或更高版本
tr -d \r &lt;infile &gt;outfile        # GNU tr 1.22 或更高版本
</code></pre><h3 id="-">将每一行前导的“空白字符”（空格，制表符）删除</h3>
<h3 id="-">使之左对齐</h3>
<pre><code>sed &#39;s/^[ \t]*//&#39;                # 见本文末尾关于&#39;\t&#39;用法的描述
</code></pre><h3 id="-">将每一行拖尾的“空白字符”（空格，制表符）删除</h3>
<pre><code>sed &#39;s/[ \t]*$//&#39;                # 见本文末尾关于&#39;\t&#39;用法的描述
</code></pre><h3 id="-">将每一行中的前导和拖尾的空白字符删除</h3>
<pre><code>sed &#39;s/^[ \t]*//;s/[ \t]*$//&#39;
</code></pre><h3 id="-5-5-">在每一行开头处插入5个空格（使全文向右移动5个字符的位置）</h3>
<pre><code>sed &#39;s/^/     /&#39;
</code></pre><h3 id="-79-">以79个字符为宽度，将所有文本右对齐</h3>
<pre><code>sed -e :a -e &#39;s/^.\{1,78\}$/ &amp;/;ta&#39;  # 78个字符外加最后的一个空格
</code></pre><h3 id="-79-1-">以79个字符为宽度，使所有文本居中。在方法1中，为了让文本居中每一行的前</h3>
<h3 id="-2-">头和后头都填充了空格。 在方法2中，在居中文本的过程中只在文本的前面填充</h3>
<h3 id="-">空格，并且最终这些空格将有一半会被删除。此外每一行的后头并未填充空格。</h3>
<pre><code>sed  -e :a -e &#39;s/^.\{1,77\}$/ &amp; /;ta&#39;                     # 方法1
sed  -e :a -e &#39;s/^.\{1,77\}$/ &amp;/;ta&#39; -e &#39;s/\( *\)\1/\1/&#39;  # 方法2
</code></pre><h4 id="-foo-foo-bar-">在每一行中查找字串“foo”，并将找到的“foo”替换为“bar”</h4>
<pre><code>sed &#39;s/foo/bar/&#39;                 # 只替换每一行中的第一个“foo”字串
sed &#39;s/foo/bar/4&#39;                # 只替换每一行中的第四个“foo”字串
sed &#39;s/foo/bar/g&#39;                # 将每一行中的所有“foo”都换成“bar”
sed &#39;s/\(.*\)foo\(.*foo\)/\1bar\2/&#39; # 替换倒数第二个“foo”
sed &#39;s/\(.*\)foo/\1bar/&#39;            # 替换最后一个“foo”
</code></pre><h3 id="-baz-foo-bar-">只在行中出现字串“baz”的情况下将“foo”替换成“bar”</h3>
<pre><code>sed &#39;/baz/s/foo/bar/g&#39;
</code></pre><h3 id="-foo-bar-baz-">将“foo”替换成“bar”，并且只在行中未出现字串“baz”的情况下替换</h3>
<pre><code>sed &#39;/baz/!s/foo/bar/g&#39;
</code></pre><h3 id="-scarlet-ruby-puce-red-">不管是“scarlet”“ruby”还是“puce”，一律换成“red”</h3>
<pre><code>sed &#39;s/scarlet/red/g;s/ruby/red/g;s/puce/red/g&#39;  #对多数的sed都有效
gsed &#39;s/scarlet\|ruby\|puce/red/g&#39;               # 只对GNU sed有效
</code></pre><h3 id="-tac-">倒置所有行，第一行成为最后一行，依次类推（模拟“tac”）。</h3>
<h3 id="-hhsed-v1-5-">由于某些原因，使用下面命令时HHsed v1.5会将文件中的空行删除</h3>
<pre><code>sed &#39;1!G;h;$!d&#39;               # 方法1
sed -n &#39;1!G;h;$p&#39;             # 方法2
</code></pre><h3 id="-rev-">将行中的字符逆序排列，第一个字成为最后一字，……（模拟“rev”）</h3>
<pre><code>sed &#39;/\n/!G;s/\(.\)\(.*\n\)/&amp;\2\1/;//D;s/.//&#39;
</code></pre><h3 id="-paste-">将每两行连接成一行（类似“paste”）</h3>
<pre><code>sed &#39;$!N;s/\n/ /&#39;
</code></pre><h3 id="-">如果当前行以反斜杠“\”结束，则将下一行并到当前行末尾</h3>
<h3 id="-">并去掉原来行尾的反斜杠</h3>
<pre><code>sed -e :a -e &#39;/\\$/N; s/\\\n//; ta&#39;
</code></pre><h3 id="-">如果当前行以等号开头，将当前行并到上一行末尾</h3>
<h3 id="-">并以单个空格代替原来行头的“=”</h3>
<pre><code>sed -e :a -e &#39;$!N;s/\n=/ /;ta&#39; -e &#39;P;D&#39;
</code></pre><h3 id="-1234567-1-234-567-">为数字字串增加逗号分隔符号，将“1234567”改为“1,234,567”</h3>
<pre><code>gsed &#39;:a;s/\B[0-9]\{3\}\&gt;/,&amp;/;ta&#39;                     # GNU sed
sed -e :a -e &#39;s/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/;ta&#39;  # 其他sed
</code></pre><h3 id="-gnu-sed-">为带有小数点和负号的数值增加逗号分隔符（GNU sed）</h3>
<pre><code>gsed -r &#39;:a;s/(^|[^0-9.])([0-9]+)([0-9]{3})/\1\2,\3/g;ta&#39;
</code></pre><h3 id="-5-5-10-15-20-">在每5行后增加一空白行 （在第5，10，15，20，等行后增加一空白行）</h3>
<pre><code>gsed &#39;0~5G&#39;                      # 只对GNU sed有效
sed &#39;n;n;n;n;G;&#39;                 # 其他sed
</code></pre><h2 id="-">选择性地显示特定行：</h2>
<h3 id="-10-head-">显示文件中的前10行 （模拟“head”的行为）</h3>
<pre><code>sed 10q
</code></pre><h3 id="-head-1-">显示文件中的第一行 （模拟“head -1”命令）</h3>
<pre><code>sed q
</code></pre><h3 id="-10-tail-">显示文件中的最后10行 （模拟“tail”）</h3>
<pre><code>sed -e :a -e &#39;$q;N;11,$D;ba&#39;
</code></pre><h4 id="-2-tail-2-">显示文件中的最后2行（模拟“tail -2”命令）</h4>
<pre><code>sed &#39;$!N;$!D&#39;
</code></pre><h3 id="-tail-1-">显示文件中的最后一行（模拟“tail -1”）</h3>
<pre><code>sed &#39;$!d&#39;                        # 方法1
sed -n &#39;$p&#39;                      # 方法2
</code></pre><h3 id="-">显示文件中的倒数第二行</h3>
<pre><code>sed -e &#39;$!{h;d;}&#39; -e x              # 当文件中只有一行时，输入空行
sed -e &#39;1{$q;}&#39; -e &#39;$!{h;d;}&#39; -e x  # 当文件中只有一行时，显示该行
sed -e &#39;1{$d;}&#39; -e &#39;$!{h;d;}&#39; -e x  # 当文件中只有一行时，不输出
</code></pre><h3 id="-grep-">只显示匹配正则表达式的行（模拟“grep”）</h3>
<pre><code>sed -n &#39;/regexp/p&#39;               # 方法1
sed &#39;/regexp/!d&#39;                 # 方法2
</code></pre><h3 id="-grep-v-">只显示“不”匹配正则表达式的行（模拟“grep -v”）</h3>
<pre><code>sed -n &#39;/regexp/!p&#39;              # 方法1，与前面的命令相对应
sed &#39;/regexp/d&#39;                  # 方法2，类似的语法
</code></pre><h3 id="-regexp-">查找“regexp”并将匹配行的上一行显示出来，但并不显示匹配行</h3>
<pre><code>sed -n &#39;/regexp/{g;1!p;};h&#39;
</code></pre><h3 id="-regexp-">查找“regexp”并将匹配行的下一行显示出来，但并不显示匹配行</h3>
<pre><code>sed -n &#39;/regexp/{n;p;}&#39;
</code></pre><h3 id="-regexp-regexp-">显示包含“regexp”的行及其前后行，并在第一行之前加上“regexp”所</h3>
<h3 id="-grep-a1-b1-">在行的行号 （类似“grep -A1 -B1”）</h3>
<pre><code>sed -n -e &#39;/regexp/{=;x;1!p;g;$!N;p;D;}&#39; -e h
</code></pre><h3 id="-aaa-bbb-ccc-">显示包含“AAA”、“BBB”或“CCC”的行（任意次序）</h3>
<pre><code>sed &#39;/AAA/!d; /BBB/!d; /CCC/!d&#39;  # 字串的次序不影响结果
</code></pre><h3 id="-aaa-bbb-ccc-">显示包含“AAA”、“BBB”和“CCC”的行（固定次序）</h3>
<pre><code>sed &#39;/AAA.*BBB.*CCC/!d&#39;
</code></pre><h3 id="-aaa-bbb-ccc-egrep-">显示包含“AAA”“BBB”或“CCC”的行 （模拟“egrep”）</h3>
<pre><code>sed -e &#39;/AAA/b&#39; -e &#39;/BBB/b&#39; -e &#39;/CCC/b&#39; -e d    # 多数sed
gsed &#39;/AAA\|BBB\|CCC/!d&#39;                        # 对GNU sed有效
</code></pre><h3 id="-aaa-">显示包含“AAA”的段落 （段落间以空行分隔）</h3>
<h3 id="hhsed-v1-5-x-g-3-">HHsed v1.5 必须在“x;”后加入“G;”，接下来的3个脚本都是这样</h3>
<pre><code>sed -e &#39;/./{H;$!d;}&#39; -e &#39;x;/AAA/!d;&#39;
</code></pre><h3 id="-aaa-bbb-ccc-">显示包含“AAA”“BBB”和“CCC”三个字串的段落 （任意次序）</h3>
<pre><code>sed -e &#39;/./{H;$!d;}&#39; -e &#39;x;/AAA/!d;/BBB/!d;/CCC/!d&#39;
</code></pre><h3 id="-aaa-bbb-ccc-">显示包含“AAA”、“BBB”、“CCC”三者中任一字串的段落 （任意次序）</h3>
<pre><code>sed -e &#39;/./{H;$!d;}&#39; -e &#39;x;/AAA/b&#39; -e &#39;/BBB/b&#39; -e &#39;/CCC/b&#39; -e d
gsed &#39;/./{H;$!d;};x;/AAA\|BBB\|CCC/b;d&#39;         # 只对GNU sed有效
</code></pre><h3 id="-65-">显示包含65个或以上字符的行</h3>
<pre><code>sed -n &#39;/^.\{65\}/p&#39;
</code></pre><h3 id="-65-">显示包含65个以下字符的行</h3>
<pre><code>sed -n &#39;/^.\{65\}/!p&#39;            # 方法1，与上面的脚本相对应
sed &#39;/^.\{65\}/d&#39;                # 方法2，更简便一点的方法
</code></pre><h3 id="-">显示部分文本——从包含正则表达式的行开始到最后一行结束</h3>
<pre><code>sed -n &#39;/regexp/,$p&#39;
</code></pre><h3 id="-8-12-8-12-">显示部分文本——指定行号范围（从第8至第12行，含8和12行）</h3>
<pre><code>sed -n &#39;8,12p&#39;                   # 方法1
sed &#39;8,12!d&#39;                     # 方法2
</code></pre><h3 id="-52-">显示第52行</h3>
<pre><code>sed -n &#39;52p&#39;                     # 方法1
sed &#39;52!d&#39;                       # 方法2
sed &#39;52q;d&#39;                      # 方法3, 处理大文件时更有效率
</code></pre><h3 id="-3-7-">从第3行开始，每7行显示一次</h3>
<pre><code>gsed -n &#39;3~7p&#39;                   # 只对GNU sed有效
sed -n &#39;3,${p;n;n;n;n;n;n;}&#39;     # 其他sed
</code></pre><h3 id="-">显示两个正则表达式之间的文本（包含）</h3>
<pre><code>sed -n &#39;/Iowa/,/Montana/p&#39;       # 区分大小写方式
</code></pre><h2 id="-">选择性地删除特定行：</h2>
<h3 id="-">显示通篇文档，除了两个正则表达式之间的内容</h3>
<pre><code>sed &#39;/Iowa/,/Montana/d&#39;
</code></pre><h3 id="-uniq-">删除文件中相邻的重复行（模拟“uniq”）</h3>
<h3 id="-">只保留重复行中的第一行，其他行删除</h3>
<pre><code>sed &#39;$!N; /^\(.*\)\n\1$/!P; D&#39;
</code></pre><h3 id="-hold-space-">删除文件中的重复行，不管有无相邻。注意hold space所能支持的缓存</h3>
<h3 id="-gnu-sed-">大小，或者使用GNU sed。</h3>
<pre><code>sed -n &#39;G; s/\n/&amp;&amp;/; /^\([ -~]*\n\).*\n\1/d; s/\n//; h; P&#39;
</code></pre><h3 id="-uniq-d-">删除除重复行外的所有行（模拟“uniq -d”）</h3>
<pre><code>sed &#39;$!N; s/^\(.*\)\n\1$/\1/; t; D&#39;
</code></pre><h3 id="-10-">删除文件中开头的10行</h3>
<pre><code>sed &#39;1,10d&#39;
</code></pre><h3 id="-">删除文件中的最后一行</h3>
<pre><code>sed &#39;$d&#39;
</code></pre><h3 id="-">删除文件中的最后两行</h3>
<pre><code>sed &#39;N;$!P;$!D;$d&#39;
</code></pre><h3 id="-10-">删除文件中的最后10行</h3>
<pre><code>sed -e :a -e &#39;$d;N;2,10ba&#39; -e &#39;P;D&#39;   # 方法1
sed -n -e :a -e &#39;1,10!{P;N;D;};N;ba&#39;  # 方法2
</code></pre><h3 id="-8-">删除8的倍数行</h3>
<pre><code>gsed &#39;0~8d&#39;                           # 只对GNU sed有效
sed &#39;n;n;n;n;n;n;n;d;&#39;                # 其他sed
</code></pre><h3 id="-">删除匹配式样的行</h3>
<pre><code>sed &#39;/pattern/d&#39;                      # 删除含pattern的行。当然pattern
                                   # 可以换成任何有效的正则表达式
</code></pre><h3 id="-grep-">删除文件中的所有空行（与“grep &#39;.&#39; ”效果相同）</h3>
<pre><code>sed &#39;/^$/d&#39;                           # 方法1
sed &#39;/./!d&#39;                           # 方法2
</code></pre><h3 id="-">只保留多个相邻空行的第一行。并且删除文件顶部和尾部的空行。</h3>
<h3 id="-cat-s-">（模拟“cat -s”）</h3>
<pre><code>sed &#39;/./,/^$/!d&#39;        #方法1，删除文件顶部的空行，允许尾部保留一空行
sed &#39;/^$/N;/\n$/D&#39;      #方法2，允许顶部保留一空行，尾部不留空行
</code></pre><h3 id="-">只保留多个相邻空行的前两行。</h3>
<pre><code>sed &#39;/^$/N;/\n$/N;//D&#39;
</code></pre><h3 id="-">删除文件顶部的所有空行</h3>
<pre><code>sed &#39;/./,$!d&#39;
</code></pre><h3 id="-">删除文件尾部的所有空行</h3>
<pre><code>sed -e :a -e &#39;/^\n*$/{$d;N;ba&#39; -e &#39;}&#39;  # 对所有sed有效
sed -e :a -e &#39;/^\n*$/N;/\n$/ba&#39;        # 同上，但只对 gsed 3.02.*有效
</code></pre><h3 id="-">删除每个段落的最后一行</h3>
<pre><code>sed -n &#39;/^$/{p;h;};/./{x;/./p;}&#39;
</code></pre><h2 id="-">特殊应用：</h2>
<h3 id="-man-page-nroff-unix-system-v-bash-shell-">移除手册页（man page）中的nroff标记。在Unix System V或bash shell下使</h3>
<h3 id="-echo-e-">用&#39;echo&#39;命令时可能需要加上 -e 选项。</h3>
<pre><code>sed &quot;s/.`echo \\\b`//g&quot;    # 外层的双括号是必须的（Unix环境）
sed &#39;s/.^H//g&#39;             # 在bash或tcsh中, 按 Ctrl-V 再按 Ctrl-H
sed &#39;s/.\x08//g&#39;           # sed 1.5，GNU sed，ssed所使用的十六进制的表示方法
</code></pre><h3 id="-e-mail-">提取新闻组或 e-mail 的邮件头</h3>
<pre><code>sed &#39;/^$/q&#39;                # 删除第一行空行后的所有内容
</code></pre><h3 id="-e-mail-">提取新闻组或 e-mail 的正文部分</h3>
<pre><code>sed &#39;1,/^$/d&#39;              # 删除第一行空行之前的所有内容
</code></pre><h3 id="-subject-subject-">从邮件头提取“Subject”（标题栏字段），并移除开头的“Subject:”字样</h3>
<pre><code>sed &#39;/^Subject: */!d; s///;q&#39;
</code></pre><h3 id="-">从邮件头获得回复地址</h3>
<pre><code>sed &#39;/^Reply-To:/q; /^From:/h; /./d;g;q&#39;
</code></pre><h3 id="-">获取邮件地址。在上一个脚本所产生的那一行邮件头的基础上进一步的将非电邮</h3>
<h3 id="-">地址的部分剃除。（见上一脚本）</h3>
<pre><code>sed &#39;s/ *(.*)//; s/&gt;.*//; s/.*[:&lt;] *//&#39;
</code></pre><h3 id="-">在每一行开头加上一个尖括号和空格（引用信息）</h3>
<pre><code>sed &#39;s/^/&gt; /&#39;
</code></pre><h3 id="-">将每一行开头处的尖括号和空格删除（解除引用）</h3>
<pre><code>sed &#39;s/^&gt; //&#39;
</code></pre><h3 id="-html-">移除大部分的HTML标签（包括跨行标签）</h3>
<pre><code>sed -e :a -e &#39;s/&lt;[^&gt;]*&gt;//g;/&lt;/N;//ba&#39;
</code></pre><h3 id="-uuencode-uuencode-">将分成多卷的uuencode文件解码。移除文件头信息，只保留uuencode编码部分。</h3>
<h3 id="-sed-">文件必须以特定顺序传给sed。下面第一种版本的脚本可以直接在命令行下输入；</h3>
<h3 id="-shell-rahul-dhesi-">第二种版本则可以放入一个带执行权限的shell脚本中。（由Rahul Dhesi的一</h3>
<h3 id="-">个脚本修改而来。）</h3>
<pre><code>sed &#39;/^end/,/^begin/d&#39; file1 file2 ... fileX | uudecode   # vers. 1
sed &#39;/^end/,/^begin/d&#39; &quot;$@&quot; | uudecode                    # vers. 2
</code></pre><h3 id="-gnu-sed-">将文件中的段落以字母顺序排序。段落间以（一行或多行）空行分隔。GNU sed使用</h3>
<h3 id="-v-">字元“\v”来表示垂直制表符，这里用它来作为换行符的占位符——当然你也可以</h3>
<h3 id="-">用其他未在文件中使用的字符来代替它。</h3>
<pre><code>sed &#39;/./{H;d;};x;s/\n/={NL}=/g&#39; file | sort | sed &#39;1s/={NL}=//;s/={NL}=/\n/g&#39;
gsed &#39;/./{H;d};x;y/\n/\v/&#39; file | sort | sed &#39;1s/\v//;y/\v/\n/&#39;
</code></pre><h3 id="-txt-zip-">分别压缩每个.TXT文件，压缩后删除原来的文件并将压缩后的.ZIP文件</h3>
<h3 id="-dos-dir-b-">命名为与原来相同的名字（只是扩展名不同）。（DOS环境：“dir /b”</h3>
<h3 id="-">显示不带路径的文件名）。</h3>
<pre><code>echo @echo off &gt;zipup.bat
dir /b *.txt | sed &quot;s/^\(.*\)\.TXT/pkzip -mo \1 \1.TXT/&quot; &gt;&gt;zipup.bat
</code></pre><p>使用SED：Sed接受一个或多个编辑命令，并且每读入一行后就依次应用这些命令。
当读入第一行输入后，sed对其应用所有的命令，然后将结果输出。接着再读入第二
行输入，对其应用所有的命令……并重复这个过程。上一个例子中sed由标准输入设
备（即命令解释器，通常是以管道输入的形式）获得输入。在命令行给出一个或多
个文件名作为参数时，这些文件取代标准输入设备成为sed的输入。sed的输出将被
送到标准输出（显示器）。因此：</p>
<pre><code>cat filename | sed &#39;10q&#39;         # 使用管道输入
sed &#39;10q&#39; filename               # 同样效果，但不使用管道输入
sed &#39;10q&#39; filename &gt; newfile     # 将输出转移（重定向）到磁盘上
</code></pre><p>要了解sed命令的使用说明，包括如何通过脚本文件（而非从命令行）来使用这些命
令，请参阅《sed &amp; awk》第二版，作者Dale Dougherty和Arnold Robbins
（O&#39;Reilly，1997；<a href="http://www.ora.com），《UNIX" target="_blank">http://www.ora.com），《UNIX</a> Text Processing》，作者
Dale Dougherty和Tim O&#39;Reilly（Hayden Books，1987）或者是Mike Arst写的教
程——压缩包的名称是“U-SEDIT2.ZIP”（在许多站点上都找得到）。要发掘sed
的潜力，则必须对“正则表达式”有足够的理解。正则表达式的资料可以看
《Mastering Regular Expressions》作者Jeffrey Friedl（O&#39;reilly 1997）。
Unix系统所提供的手册页（“man”）也会有所帮助（试一下这些命令
“man sed”、“man regexp”，或者看“man ed”中关于正则表达式的部分），但
手册提供的信息比较“抽象”——这也是它一直为人所诟病的。不过，它本来就不
是用来教初学者如何使用sed或正则表达式的教材，而只是为那些熟悉这些工具的人
提供的一些文本参考。</p>
<p>括号语法：前面的例子对sed命令基本上都使用单引号（&#39;...&#39;）而非双引号
（&quot;...&quot;）这是因为sed通常是在Unix平台上使用。单引号下，Unix的shell（命令
解释器）不会对美元符（$）和后引号（<code>...</code>）进行解释和执行。而在双引号下
美元符会被展开为变量或参数的值，后引号中的命令被执行并以输出的结果代替
后引号中的内容。而在“csh”及其衍生的shell中使用感叹号（!）时需要在其前
面加上转义用的反斜杠（就像这样：!）以保证上面所使用的例子能正常运行
（包括使用单引号的情况下）。DOS版本的Sed则一律使用双引号（&quot;...&quot;）而不是
引号来圈起命令。</p>
<p>&#39;\t&#39;的用法：为了使本文保持行文简洁，我们在脚本中使用&#39;\t&#39;来表示一个制表
符。但是现在大部分版本的sed还不能识别&#39;\t&#39;的简写方式，因此当在命令行中为
脚本输入制表符时，你应该直接按TAB键来输入制表符而不是输入&#39;\t&#39;。下列的工
具软件都支持&#39;\t&#39;做为一个正则表达式的字元来表示制表符：awk、perl、HHsed、
sedmod以及GNU sed v3.02.80。</p>
<p>不同版本的SED：不同的版本间的sed会有些不同之处，可以想象它们之间在语法上
会有差异。具体而言，它们中大部分不支持在编辑命令中间使用标签（:name）或分
支命令（b,t），除非是放在那些的末尾。这篇文档中我们尽量选用了可移植性较高
的语法，以使大多数版本的sed的用户都能使用这些脚本。不过GNU版本的sed允许使
用更简洁的语法。想像一下当读者看到一个很长的命令时的心情：</p>
<pre><code>sed -e &#39;/AAA/b&#39; -e &#39;/BBB/b&#39; -e &#39;/CCC/b&#39; -e d
</code></pre><p>好消息是GNU sed能让命令更紧凑：</p>
<pre><code>sed &#39;/AAA/b;/BBB/b;/CCC/b;d&#39;      # 甚至可以写成
sed &#39;/AAA\|BBB\|CCC/b;d&#39;
</code></pre><p>此外，请注意虽然许多版本的sed接受象“/one/ s/RE1/RE2/”这种在&#39;s&#39;前带有空
格的命令，但这些版本中有些却不接受这样的命令:“/one/! s/RE1/RE2/”。这时
只需要把中间的空格去掉就行了。</p>
<p>速度优化：当由于某种原因（比如输入文件较大、处理器或硬盘较慢等）需要提高
命令执行速度时，可以考虑在替换命令（“s/.../.../”）前面加上地址表达式来
提高速度。举例来说：</p>
<pre><code>sed &#39;s/foo/bar/g&#39; filename         # 标准替换命令
sed &#39;/foo/ s/foo/bar/g&#39; filename   # 速度更快
sed &#39;/foo/ s//bar/g&#39; filename      # 简写形式
</code></pre><p>当只需要显示文件的前面的部分或需要删除后面的内容时，可以在脚本中使用“q”
命令（退出命令）。在处理大的文件时，这会节省大量时间。因此：</p>
<pre><code>sed -n &#39;45,50p&#39; filename           # 显示第45到50行
sed -n &#39;51q;45,50p&#39; filename       # 一样，但快得多
</code></pre>]]></content>
    <summary type="html"><![CDATA[<p>SED单行脚本快速参考（Unix 流编辑器） 整理：Eric Pement  - 电邮：pemente[at]northpark[dot]edu  ]]></summary>
    
      <category term="command" scheme="http://loveliuli.com/tags/command/"/>
    
      <category term="命令" scheme="http://loveliuli.com/categories/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Welcome to my blog]]></title>
    <link href="http://loveliuli.com/2014/02/21/network/network_01/"/>
    <id>http://loveliuli.com/2014/02/21/network/network_01/</id>
    <published>2014-02-21T08:36:12.000Z</published>
    <updated>2014-05-23T09:54:04.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to my blog!.</p>
]]></content>
    
    
      <category term="network" scheme="http://loveliuli.com/tags/network/"/>
    
      <category term="网络" scheme="http://loveliuli.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Welcome to my blog]]></title>
    <link href="http://loveliuli.com/2014/02/21/cluster/cluster_01/"/>
    <id>http://loveliuli.com/2014/02/21/cluster/cluster_01/</id>
    <published>2014-02-21T08:36:12.000Z</published>
    <updated>2014-05-23T09:53:07.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to my blog!.</p>
]]></content>
    
    
      <category term="cluster" scheme="http://loveliuli.com/tags/cluster/"/>
    
      <category term="集群" scheme="http://loveliuli.com/categories/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Welcome to my blog]]></title>
    <link href="http://loveliuli.com/2014/02/21/base/base_01/"/>
    <id>http://loveliuli.com/2014/02/21/base/base_01/</id>
    <published>2014-02-21T08:36:12.000Z</published>
    <updated>2014-05-23T11:35:21.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to my blog!.</p>
]]></content>
    
    
      <category term="base" scheme="http://loveliuli.com/tags/base/"/>
    
      <category term="基础" scheme="http://loveliuli.com/categories/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Welcome to my blog]]></title>
    <link href="http://loveliuli.com/2014/02/21/performance/Performance_01/"/>
    <id>http://loveliuli.com/2014/02/21/performance/Performance_01/</id>
    <published>2014-02-21T08:36:12.000Z</published>
    <updated>2014-05-23T11:45:36.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to my blog!.</p>
]]></content>
    
    
      <category term="Performance tuning" scheme="http://loveliuli.com/tags/Performance%20tuning/"/>
    
      <category term="优化" scheme="http://loveliuli.com/categories/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php5.3上扩展mcrypt模块]]></title>
    <link href="http://loveliuli.com/2014/02/18/app/app_02_php_mcrypt/"/>
    <id>http://loveliuli.com/2014/02/18/app/app_02_php_mcrypt/</id>
    <published>2014-02-18T01:27:46.000Z</published>
    <updated>2014-05-23T10:31:53.000Z</updated>
    <content type="html"><![CDATA[<hr>
<p> 由于最近需要对php的模块进行扩展，所以进行了简单整理，过程如下。<a id="more"></a></p>
<h2 id="-">问题的解决</h2>
<pre><code>#!/bin/bash
cur_dir=${pwd}
tar zxvf libmcrypt-2.5.8.tar.gz
cd libmcrypt-2.5.8
./configure
make &amp;&amp; make install

cd ..
tar xvf mhash-0.9.9.9.tar.bz2
cd mhash-0.9.9.9
./configure
make &amp;&amp; make install

cd ..
tar zxvf m4-1.4.9.tar.gz 
cd m4-1.4.9
./configure
make &amp;&amp; make install

cd ..
tar zxvf autoconf-2.62.tar.gz 
cd autoconf-2.62
./configure
make &amp;&amp; make install

cd ..
tar zxvf mcrypt-2.6.8.tar.gz
cd mcrypt-2.6.8
LD_LIBRARY_PATH=/usr/local/lib ./configure 
make &amp;&amp; make install

cd ..
tar zxvf php-5.2.17.tar.gz
cd php-5.2.17/ext/mcrypt/
/usr/local/
php/bin/phpize
./configure  --with-php-config=/usr/local/php/bin/php-config  
make &amp;&amp; make test &amp;&amp; make install



cp /usr/local/php/lib/php/extensions/no-debug-non-zts-20060613/mcrypt.so /usr/local/php

service httpd restart
</code></pre><p>其他模块的扩展可以依葫芦画瓢，没有难度的。</p>
<pre><code>[root@chcp-ct01-log01 mcrypt]# php -m
[PHP Modules]
bcmath
Core
ctype
curl
date
dom
ereg
fileinfo
filter
gd
gettext    
hash
iconv
json
libxml
mbstring
</code></pre><p> <strong>mcrypt</strong></p>
<pre><code>mysql
pcre
PDO
pdo_sqlite
Phar
posix
Reflection
session
SimpleXML
sockets
SPL
SQLite
sqlite3
standard
tokenizer
xml
xmlreader
xmlwriter
Zend Guard Loader
zlib
[Zend Modules]
Zend Guard Loader
</code></pre>]]></content>
    <summary type="html"><![CDATA[<hr>
<p> 由于最近需要对php的模块进行扩展，所以进行了简单整理，过程如下。]]></summary>
    
      <category term="php_modules" scheme="http://loveliuli.com/tags/php_modules/"/>
    
      <category term="应用" scheme="http://loveliuli.com/categories/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[php5.3.28 类型冲突]]></title>
    <link href="http://loveliuli.com/2014/01/27/app/app_03_php_problem/"/>
    <id>http://loveliuli.com/2014/01/27/app/app_03_php_problem/</id>
    <published>2014-01-27T01:27:46.000Z</published>
    <updated>2014-05-23T10:32:04.000Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="-">问题出现</h1>
<h4 id="-php-apache-php-apache-more-">由于最近公司扫描发现php和apache版本过低，有几个比较严重的漏洞，所以准备对php和apache进行升级。<a id="more"></a></h4>
<pre><code>apache版本为2.4.3，但是在开启apache发现加载libphp5.so时错误：undefined symbol:unixd_config,
经查明原因：http2.4目前不再支持php5.2版本，要使用php为5.3或者以上的版本，所以PHP也需要升级。
在官网下载5.3.28版本后，安装过程中发现有如下问题：
./configure过程很顺利，在make环节发生错误。报错：
/root/php-5.3.28/Zend/zend_language_parser.h:317:错误:与‘zendparse’类型冲突。
下一句给了提示：zend_globals_macros.h：35中‘zendparse’类型如此：
</code></pre><h1 id="-">解决过程</h1>
<pre><code>打开./Zend/zend_language_parser.h文件，看看zendparese参数：
316 #if defined __STDC__ || defined __cplusplus
317 int zendparse (void);
318 #else
319 int zendparse ();
320 #endif
再看看zend_globals_macros.h：35是什么参数。
33 #ifdef ZTS
34 # define CG(v) TSRMG(compiler_globals_id, zend_compiler_globals *, v)
35 int zendparse(void *compiler_globals);
36 #else
</code></pre><p>好吧，那我就把35行的参数，改到zend_language_parser.h 317行。</p>
<pre><code>316 #if defined __STDC__ || defined __cplusplus
317 int zendparse (void *compiler_globals);
318 #else
319 int zendparse ();
320 #endif
</code></pre><p>再进行make，OK。
顺利完成了。
官方版本发布的太急了吧，有此错误。
PS：生产服务器一定三思，此参数的更改可能会影响到您的业务。</p>
]]></content>
    <summary type="html"><![CDATA[<hr>
<h1 id="-">问题出现</h1>
<h4 id="-php-apache-php-apache-more-">由于最近公司扫描发现php和apache版本过低，有几个比较严重的漏洞，所以准备对php和apache进行升级。]]></summary>
    
      <category term="php_problem" scheme="http://loveliuli.com/tags/php_problem/"/>
    
      <category term="应用" scheme="http://loveliuli.com/categories/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
</feed>
